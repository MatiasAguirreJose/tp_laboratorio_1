#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <limits.h>
#include "Funciones.h"
#define TRUE 0
#define FALSE 1
#define TAM 10
void Opcion(void){
	puts("..[ingrese una opcion].. \n");
};
void SelecionarMenu(void){

	setbuf(stdout,NULL);

	printf("ingrese una opcion \n");
	printf("[1] - DAR DE ALTA \n");
	printf("[2] - MODIFICAR DATOS \n");
	printf("[3] - ELIMINAR ID \n");
	printf("[4] - CREAR PEDIDO DE RECOLECCION  \n");
	printf("[5] -  PROCESAR PEDIDOS \n");
	printf("[6] -  MOSTRAR LOS CLIENTES QUE DEBEN \n");
	printf("[7] -  MOSTRAR LOS PEDIDOS PENDIENTES \n");
	printf("[8] -  MOSTRAR LOS PEDIDOS PROCESADOS \n");
	printf("[9] -  MOSTRAR LOS PEDIDOS POR DIRECCION \n");
	printf("[10] -  PROMEDIO DE PROLIPOPRILENO  \n");
	printf("[11] -  PROMEDIO DE CLIENTES \n");
	printf("[12] -  **SALIR**  \n");

}


int InicializarClientes(Clientes* muestra, int tam){


	int retorno;
	retorno = -1;

	if(muestra != NULL && tam>=0  ){
		for (int i = 0; i < tam; i++) {

			muestra[i].PedidosCompletados = 0;
			muestra[i].PedidosPendientes = 0;
			muestra[i].isEmpty = TRUE;


		}
		retorno = 0;
	}


	return retorno;

}
int InicializarPedido(Pedido* clientes, int tam){

int retorno;
retorno = -1;

if( tam>=0 && clientes !=NULL ){
	for (int i = 0; i < tam; i++) {
		clientes[i].isEmpty = TRUE;


	}
	retorno = 0;
}


return retorno;
}
//1--------------------------------------------------------------------------------------------------------!!
int AniadirCliente(Clientes* muestra, int tamanio,int id,char empresa[],int localidad, float cuit, int direccion){
	 setbuf(stdout,NULL);
	int retorno ;
	retorno = -1;


	if(muestra != NULL && tamanio >= 0 && id >= 0){

     for ( int i = 0;  i < tamanio; ++ i) {

    	 if( muestra[i].isEmpty == TRUE  ){


			muestra[i].idCliente = id;
			strcpy(muestra[i].Empresa, empresa);
			muestra[i].idLocalidad = localidad;
			muestra[i].direccion = direccion;
			muestra[i].cuit = cuit;
			muestra[i].isEmpty = FALSE;

			retorno = 0;

			break;

			}
		}
	}

return retorno;
}
//--------------------------------------------------------------------------------------------------------!!
void MostrarDatos(Clientes* muestra,eLocalidad* localidadArray, int tamanio, int tamLocalidad){
	if(muestra != NULL && tamanio >= 0 ){
		puts("ID          EMPRESA     LOCALIDAD           DIRECCION         CUIT");
	for ( int i = 0;  i < tamanio;  i++) {

		for ( int j = 0;  j <tamLocalidad;  j++){

		if(muestra[i].isEmpty == FALSE && muestra[i].idLocalidad== localidadArray[j].idLocalidad ){
			printf("%d",muestra[i].idCliente);
			printf("%16s",muestra[i].Empresa);
			printf("%17s",localidadArray[j].Localidad);
			printf("%15d",muestra[i].direccion);
			printf("%17.1f\n",muestra[i].cuit);

		}


		}


	 }
	}
}



//2--------------------------------------------------------------------------------------------------------!!
int ModificarDatosCliente(Clientes* muestra,eLocalidad* localidadArray, int tam, int idModificar,int tamLocalidad){
int idlocalidad;
int buscarError;
int retorno = -1;
	for ( int i = 0;  i < tam;  i++) {
		if(muestra[i].idCliente == idModificar){
			retorno = 0;
			getNumero(&muestra[i].direccion, "Ingrese la direccion");

			do{
			getNumero(&idlocalidad, "Ingrese la Localidad");
			buscarError = BuscarLocalidadPorId(localidadArray, tamLocalidad, idlocalidad);
			}while(buscarError == -1);
			muestra[i].idLocalidad= idlocalidad;

			puts("se modifico con exito");
		}

	}

return retorno;
}

//3--------------------------------------------------------------------------------------------------------!!
void ElimiarCliente(Clientes* muestra, int tam, int idEliminar){
	int Respuesta;
	for ( int i = 0;  i < tam;  i++) {

		if(muestra[i].idCliente == idEliminar){
			printf("Esta seguro que quiere eliminar? 1- si  2- no");
			fflush(stdin);
			scanf("%d",&Respuesta);

			if(Respuesta == 1){

				muestra[i].isEmpty = TRUE;
		}else {
			puts("no se elimino .... ");
		}


		}
	}



}

//4--------------------------------------------------------------------------------------------------------!!
int PedidoRecoleccion(Clientes* muestra, Pedido* clientes, int tam , int idrecoleccion){
	int retorno;
	int id;
	int kilos;
	int kilosNuevos;

	retorno = 0;
	if(muestra != NULL &&  tam >= 0 ){

		printf("Ingrese el id : ");
		fflush(stdin);
		scanf("%d",&id);
		for ( int j = 0;  j < tam;  j++){
			if(muestra[j].idCliente == id){
		muestra[j].PedidosPendientes ++;
			}
		}

		for ( int i = 0;  i < tam;  i++) {

			if(clientes[i].isEmpty == TRUE && muestra[i].idCliente == id ){


				printf("Ingrese los kilos : ");
				fflush(stdin);
				scanf("%d",&kilos);

				clientes[i].idCliente = id;
				clientes[i].kilos = kilos;
				clientes[i].idRecoleccion = idrecoleccion;

				clientes[i].isEmpty = FALSE ;

				retorno = 1 ;

				break;

			}else{
				if(clientes[i].isEmpty == FALSE && clientes[i].idCliente == id  ) {
					printf("Ingrese los kilos : ");
					fflush(stdin);
					scanf("%d",&kilosNuevos);

					clientes[i].kilos += kilosNuevos;
					muestra[i].PedidosPendientes ++;


				}

			}
		}


}
	return retorno;
}
//6--------------------------------------------------------------------------------------------------------!!
void ImprimirClientes(Clientes* muestra, Pedido* clientes,eLocalidad* localidadArray, int tam , int lenlocalidad){



	if(muestra != NULL &&clientes!= NULL && tam >= 0 ){


		for ( int i = 0;  i < tam;  i++) {
			if(clientes[i].isEmpty == FALSE && muestra[i].isEmpty == FALSE){

				MostrarDatos(muestra,localidadArray  ,tam, lenlocalidad);
				puts("\n");
				printf("lA ID RECOLECCION ES %d \n",clientes[i].idCliente);
				printf("LOS PEDIDOS PENDIENTES SON  %d \n",muestra[i].PedidosPendientes);
				puts("ESTADO ES ****PENDIENTE**** \n");
				puts("\n-----------------------------------------------------");



		}
		}


	}



}
//7--------------------------------------------------------------------------------------------------------!!
int MostrarPedidosPendientes(Clientes* muestra, Pedido* clientes, int tam){
int retorno = -1;
	if(muestra != NULL &&clientes!= NULL && tam >= 0 ){


		for ( int i = 0;  i < tam;  i++) {
			for ( int j = 0;  j < tam;  j++){
			if(clientes[j].isEmpty == FALSE && muestra[i].isEmpty == FALSE
					&& muestra[i].idCliente == clientes[j].idCliente){



				printf("\nEl ID  %d \n",muestra[i].idCliente);
				printf("\nEl ID recoleccion  %d \n",clientes[j].idRecoleccion);
				printf("\n Tiene   %d pedidos pendientes \n",muestra[i].PedidosPendientes);
				printf("El CUit del cliente es %f \n",muestra[i].cuit);
				printf("La direccion  del cliente es %d \n",muestra[i].direccion);
				printf("los kilos totales que debe es de %d \n",clientes[i].kilos);
				retorno = 0;
			}

		}
		}


	}
	return retorno;

}
//9--------------------------------------------------------------------------------------------------------!!
void MostrarPorDireccion(Clientes* muestra,eLocalidad* localidadArray,int tamLocalidad, Pedido* clientes, int tam){


	int i;
	int SumaPedidos = 0;
	int buscarError;
	int idLocalidad;

	do{
	getNumero(&idLocalidad, "Ingrese la Localidad");
	buscarError = BuscarLocalidadPorId(localidadArray, tamLocalidad, idLocalidad);
	}while(buscarError == -1);

	for (i = 0; i < tam; i++) {

		if(muestra[i].idLocalidad == idLocalidad){
			SumaPedidos += muestra[i].PedidosPendientes;
			break;

		}else{
			if(muestra[i].idLocalidad != idLocalidad){
			puts("No existe nadie con esa Direccion");
			break;
			}
		}

	}

	if(SumaPedidos>0){
	printf("LOS PEDIDOS PENDIENTES CON ESA DIRECCION SON  %d \n",SumaPedidos);
	}else{
		if(SumaPedidos<=0){

		puts("LOS PEDIDOS PENDIENTES CON ESA DIRECCION SON  CERO \n");
	}

	}
	}

//--------------------------------------------------------------------------------------------------------!!
int ProcesarResiduos(Clientes* muestra, Pedido* clientes, int tam){

	int id;
	int i;
	int kilosAuxiliar;
	int prolipropileno=0 ;
	int kilosalta;
	int kilosBAJA;
	int KilosTOTALTOTAL;

	int kilosTotales;




	printf("ingresar el id del pedido a Procesar");
	scanf("%d",&id);

	for (i = 0; i < tam; ++i) {
		if (clientes[i].isEmpty == FALSE && clientes[i].idCliente==id){


			kilosTotales = clientes[i].kilos;

			kilosalta = IngresarEntero("ingrese la cantidad de polietileno de alta Intensidad",0,kilosTotales) ;
			KilosTOTALTOTAL = kilosTotales-kilosalta;
			printf("Cantidad de Kilos restantes %d \n",KilosTOTALTOTAL);


			kilosBAJA= IngresarEntero("ingrese la cantidad de polietileno de Baja Intensidad",0,KilosTOTALTOTAL )  ;
			KilosTOTALTOTAL -= kilosBAJA;
			printf("Cantidad de Kilos restantes %d \n",KilosTOTALTOTAL);

			kilosAuxiliar = IngresarEntero("ingrese la cantidad de prolipropileno",0,KilosTOTALTOTAL) ;
			KilosTOTALTOTAL -= kilosAuxiliar;
			prolipropileno += KilosTOTALTOTAL;
			printf("Cantidad de Kilos restantes %d \n",KilosTOTALTOTAL );



			clientes[i].kilos = TRUE;
			clientes[i].estado = FALSE;
			muestra[i].PedidosPendientes -= 1;
			muestra[i].PedidosCompletados++;

			break;






		}
		if(	muestra[i].PedidosPendientes == 0) {
			clientes[i].isEmpty = TRUE;
		}
		}
return prolipropileno ;
	}

//8--------------------------------------------------------------------------------------------------------!!
int MostrarPedidosProcesados(Clientes* muestra, Pedido* clientes, int tam){
int retorno;
retorno = -1;
	if(muestra != NULL && clientes!= NULL && tam >= 0 ){
	for (int i = 0; i < tam; ++i) {
		if (	muestra[i].PedidosCompletados>=0 && clientes[i].isEmpty == TRUE && clientes[i].estado == FALSE){



			printf("el id %d \n",clientes[i].idCliente);
			printf("los pedidos prosesados son %d \n",	muestra[i].PedidosCompletados);
			retorno = 0;



		}
		}

		}
	return retorno;
	}

//10--------------------------------------------------------------------------------------------------------!!
void PromedioCliente(Clientes* muestra, Pedido* clientes, int cantidadCliente,int polipropileno){

	float promedio;
	promedio = (float)cantidadCliente /(float) polipropileno;

	printf("El promedio del polipropileno por cliente es de: %f",promedio);




}
//--------------------------------------------------------------------------------------------------------!!
int IngresarEntero(char mensaje[],int min,int max)
{
    setbuf(stdout, NULL);

    int numero;

    do{
    printf(mensaje);

    scanf("%d",&numero);
    }while(numero < min || numero > max);

    return numero;
}

void LocalidadMenu(eLocalidad* localidadArray, int lenlocalidad){
		int i;

		puts("La localidades son\n");

		for (i = 0; i < lenlocalidad; ++i) {
			printf("%d %s \n",localidadArray[i].idLocalidad,localidadArray[i].Localidad);

		}



}

int BuscarLocalidadPorId(eLocalidad* localidadArray, int len, int idLocalidad){
	int retorno = -1;
	int i;
	for (i = 0; i < len; ++i) {

		if(localidadArray[i].idLocalidad ==  idLocalidad){
			retorno = 0;

		}
	}


	return retorno;

}
void PromedioClientesMayor(Clientes* muestra, Pedido* clientes, int tam){
	char auxiliarchar[20];

	 	int pedidoMayor;

	 	int flag = 0;
	 	for (int i = 0; i < tam; ++i) {



	 				if(flag == 0 &&	muestra[i].PedidosCompletados > 0 ){

	 				flag = 1;
	 				pedidoMayor =muestra[i].PedidosCompletados ;
	 				strcpy(auxiliarchar , muestra[i].Empresa);

	 				}else{

	 					if(pedidoMayor >  	muestra[i].PedidosCompletados){

	 					}else{
	 						pedidoMayor = 	muestra[i].PedidosCompletados;
	 						strcpy(auxiliarchar , muestra[i].Empresa);
	 					}


	 			}

	 }
	 	if(pedidoMayor==0){
	 		puts("no hay pedidos completados");
	 	}else{
	 	printf("el cliente con mas pedidos completados es %s con %d pedidos  \n",auxiliarchar,pedidoMayor );
	 	}
}



 void PromedioClientesMenos(Clientes* muestra, Pedido* clientes, int tam){
	char auxiliarchar[20];

	int flag;
	int pedidoMayor = 0;



		for (int i = 0; i < tam; ++i) {



		 				if(flag == 0 && 	muestra[i].PedidosPendientes > 0 ){

		 				flag = 1;
		 				 pedidoMayor = 	muestra[i].PedidosPendientes;
		 				strcpy(auxiliarchar , muestra[i].Empresa);

		 				}else{

		 					if( pedidoMayor >	muestra[i].PedidosPendientes){

		 					}else{
		 						 pedidoMayor =	muestra[i].PedidosPendientes;
		 						strcpy(auxiliarchar , muestra[i].Empresa);
		 					}


		 			}

		 }
		if(pedidoMayor == 0){
			puts("no hay cliente con pedidos pendientes");
		}else{
		 	printf("el cliente con mas pedidos pendientes es %s con %d pedidos  \n",auxiliarchar,pedidoMayor );
		}

}
/* void PromedioClientesMasPedidos(Clientes* muestra, Pedido* clientes,  int tam){
 	char auxiliarchar[20];

 	int pedidoMayor;


 	for (int i = 0; i < tam; ++i) {


 				 if(flag == 0 && clientes[i].pedidos > 0 ){

 				flag = 1;
 				pedidoMayor = clientes[i].pedidos;
 				strcpy(auxiliarchar , muestra[i].Empresa);

 				}else{

 					if(pedidoMayor > clientes[i].pedidos){

 					}else{
 						pedidoMayor = clientes[i].pedidos;
 						strcpy(auxiliarchar , muestra[i].Empresa);
 					}


 			}

 }

 	if(pedidoMayor == 0){
 				puts("no hay cliente con pedidos echos todavia");
 			}else{
 			 	printf("el cliente con mas pedidos es %s con %d pedidos  \n",auxiliarchar,pedidoMayor );
 			}

 }
*/
